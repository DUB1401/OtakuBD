from Source.CLI.Templates import Columns

from dublib.CLI.StyledPrinter import Styles, StylesGroup, StyledPrinter, TextStyler
from dublib.CLI.Terminalyzer import ParametersTypes, Command, ParsedCommandData
from dublib.Engine.Bus import ExecutionError, ExecutionWarning, ExecutionStatus
from dublib.Methods.JSON import ReadJSON, WriteJSON
from dublib.CLI.Templates import Confirmation

import os

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô –° –¢–ê–ë–õ–ò–¶–ï–ô <<<<< #
#==========================================================================================#

class AnimeNoteCLI:
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é —á–µ—Ä–µ–∑ CLI."""

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def commands(self) -> list[Command]:
		"""–°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥."""

		return self.__Commands

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __GenerateCommands(self) -> list[Command]:
		"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""

		# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
		CommandsList = list()

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: delpart.
		Com = Command("delpart", "Remove part.")
		Com.add_argument(ParametersTypes.Number, description = "Part index.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: downpart.
		Com = Command("downpart", "Omit part in list.")
		Com.add_argument(ParametersTypes.Number, description = "Part index.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: editpart.
		Com = Command("editpart", "Edit part.")
		Com.add_argument(ParametersTypes.Number, description = "Part index.", important = True)
		Com.add_flag("a", description = "Mark part as announced.")
		Com.add_flag("s", description = "Mark part as skipped.")
		Com.add_flag("u", description = "Mark part as unwatched.")
		Com.add_flag("w", description = "Mark part as watched.")
		Com.add_key("comment", description = "Add comment to part.")
		Com.add_key("link", ParametersTypes.URL, description = "Attach link to part.")
		Com.add_key("name", description = "Set name of part.")
		Com.add_key("number", description = "Set number of part (not index).")
		Com.add_key("series", ParametersTypes.Number, description = "Set series count.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: mark.
		Com = Command("mark", "Set bookmark to series.")
		Com.add_argument(ParametersTypes.Number, description = "Part index.", important = True)
		Com.add_argument(ParametersTypes.Number, description = "Bookmark.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: meta.
		Com = Command("meta", "Manage note metainfo fields.")
		Com.add_argument(ParametersTypes.All, description = "Field name.", important = True)
		Com.add_argument(ParametersTypes.All, description = "Field value.")
		Com.add_flag("set", description = "Create new or update exists field.", important = True)
		Com.add_flag("unset", description = "Remove field.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: newpart.
		Com = Command("newpart", "Create new part.")
		Com.add_argument(description = "Part type.", important = True)
		Com.add_flag("a", description = "Mark part as announced.")
		Com.add_flag("s", description = "Mark part as skipped.")
		Com.add_flag("u", description = "Mark part as unwatched.")
		Com.add_flag("w", description = "Mark part as watched.")
		Com.add_key("comment", description = "Add comment to part.")
		Com.add_key("link", ParametersTypes.URL, description = "Attach link to part.")
		Com.add_key("name", description = "Set name of part.")
		Com.add_key("number", description = "Set number of part (not index).")
		Com.add_key("series", ParametersTypes.Number, description = "Set series count.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: set.
		Com = Command("set", "Set note values.")
		Com.add_key("altname", description = "Alternative name.")
		Com.add_key("estimation", ParametersTypes.Number, "Note estimation.")
		Com.add_key("group", ParametersTypes.Number, description = "Group ID.")
		Com.add_key("name", description = "Note name.")
		Com.add_key("status", description = "View status.")
		Com.add_key("tag", description = "Tag.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: unset.
		Com = Command("unset", "Remove alternative names or tags.")
		ComPos = Com.create_position("TARGET", "Target to remove.", important = True)
		ComPos.add_key("altname", ParametersTypes.Number, "Index of alternative name.")
		ComPos.add_key("tag", description = "Tag.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: uppart.
		Com = Command("uppart", "Raise part.")
		Com.add_argument(ParametersTypes.Number, "Part index.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: view.
		Com = Command("view", "View note in console.")
		CommandsList.append(Com)

		return CommandsList

	def __View(self):
		"""–í—ã–≤–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."""

		#---> –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
		#==========================================================================================#
		# –û–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
		Group = self.__Table.get_group(self.__Note.group_id) if self.__Note.group_id else None
		# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
		GroupName = Group["name"] if Group and Group["name"] else None
		# –ß–∞—Å—Ç–∏ –∑–∞–ø–∏—Å–∏.
		Parts = self.__Note.parts
		# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Å–º–æ—Ç–æ—Ä—â–∏–∫–∞.
		Options = self.__Table.options["viewer"]

		#---> –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞–ª–æ–≤.
		#==========================================================================================#
		# –û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
		MSG_TotalProgress = f" ({self.__Note.progress}% viewed)" if self.__Note.progress else ""
		# –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã. 
		MSG_GroupName = f"@{self.__Note.group_id}" if not GroupName else f"@{GroupName}"

		#---> –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.
		#==========================================================================================#
		# –ï—Å–ª–∏ —É –∑–∞–ø–∏—Å–∏ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ, –≤—ã–≤–µ—Å—Ç–∏ –µ–≥–æ.
		if self.__Note.name: StyledPrinter(self.__Note.name, decorations = [Styles.Decorations.Bold], end = False)
		# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
		print(f"{MSG_TotalProgress} {self.__Note.emoji_status}")
		# –í—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –∫–∞–∂–¥–æ–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
		for AnotherName in self.__Note.another_names: StyledPrinter(f"    {AnotherName}", decorations = [Styles.Decorations.Italic])
		# –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –æ—Ü–µ–Ω–∫–∞, –≤—ã–≤–µ—Å—Ç–∏ –µ—ë.
		if self.__Note.estimation: print(f"‚≠ê {self.__Note.estimation} / {self.__Table.max_estimation}")

		#---> –í—ã–≤–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø–∏—Å–∏.
		#==========================================================================================#

		# –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞.
		if self.__Note.group_id:
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä—É–ø–ø—ã.
			StyledPrinter(f"GROUP: ", decorations = [Styles.Decorations.Bold], end = False)
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
			StyledPrinter(MSG_GroupName, decorations = [Styles.Decorations.Italic])

		# –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
		if self.__Note.metainfo:
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
			StyledPrinter(f"METAINFO:", decorations = [Styles.Decorations.Bold])
			# –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
			MetaInfo = self.__Note.metainfo
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞.
			for Key in MetaInfo.keys():
				# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
				print(f"    {Key}: " + str(MetaInfo[Key]))

		# –ï—Å–ª–∏ –∑–∞–¥–∞–Ω—ã —Ç–µ–≥–∏.
		if self.__Note.tags:
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–µ–≥–æ–≤.
			StyledPrinter(f"TAGS: ", decorations = [Styles.Decorations.Bold], end = False)
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: —Ç–µ–≥–∏.
			print(", ".join(self.__Note.tags))

		#---> –í—ã–≤–æ–¥ —á–∞—Å—Ç–µ–π –∑–∞–ø–∏—Å–∏.
		#==========================================================================================#

		# –ï—Å–ª–∏ –∏–º–µ—é—Ç—Å—è —á–∞—Å—Ç–∏.
		if Parts:
			# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Å—Ç–µ–π.
			StyledPrinter(f"PARTS:", decorations = [Styles.Decorations.Bold])

			# –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
			for PartIndex in range(0, len(Parts)):

				#---> –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞–ª–æ–≤.
				#==========================================================================================#
				# –≠–º–æ–¥–∑–∏-—Å—Ç–∞—Ç—É—Å —á–∞—Å—Ç–∏.
				MSG_PartStatus = ""
				if "watched" in Parts[PartIndex].keys(): MSG_PartStatus = " ‚úÖ"
				if "announced" in Parts[PartIndex].keys(): MSG_PartStatus = " ‚ÑπÔ∏è"
				if "skipped" in Parts[PartIndex].keys(): MSG_PartStatus = " üö´"
				# –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏.
				MSG_Name = " " + Parts[PartIndex]["name"] if "name" in Parts[PartIndex].keys() and Parts[PartIndex]["name"] else ""
				# –ù–æ–º–µ—Ä.
				MSG_Number = " " + str(Parts[PartIndex]["number"]) if "number" in Parts[PartIndex].keys() and Parts[PartIndex]["number"] else ""
				# –û—Ç—Å—Ç—É–ø (—Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç –¥–ª–∏–Ω—ã –∏–Ω–¥–µ–∫—Å–∞).
				MSG_Indent = " " * len(str(PartIndex))
				# –¢–∏–ø –∑–∞–ø–∏—Å–∏.
				MSG_Type = Parts[PartIndex]["type"]

				#---> –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–∞—Å—Ç–∏.
				#==========================================================================================#
				# –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞.
				TextColor = None
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–≤–µ—Ç–æ–≤.
				if Options["colorize"] and "‚úÖ" in MSG_PartStatus: TextColor = StylesGroup(text_color = Styles.Colors.Green)
				if Options["colorize"] and "‚ÑπÔ∏è" in MSG_PartStatus: TextColor = StylesGroup(text_color = Styles.Colors.Cyan)
				if Options["colorize"] and "üö´" in MSG_PartStatus: TextColor = StylesGroup(text_color = Styles.Colors.Blue)

				# –ï—Å–ª–∏ —á–∞—Å—Ç—å –º–Ω–æ–≥–æ—Å–µ—Ä–∏–π–Ω–∞—è.
				if "series" in Parts[PartIndex].keys():

					#---> –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ª–∏—Ç–µ—Ä–∞–ª–æ–≤.
					#==========================================================================================#
					# –ó–∞–∫–ª–∞–¥–∫–∞.
					MSG_Mark = str(Parts[PartIndex]["mark"]) + " / " if "mark" in Parts[PartIndex] else ""
					# –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–∫–ª–∞–¥–∫–∏.
					MSG_MarkIndicator = " ‚è≥" if MSG_Mark else ""
					# –ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —á–∞—Å—Ç–∏.
					MSG_Progress = " (" + str(int(Parts[PartIndex]["mark"] / Parts[PartIndex]["series"] * 100)) + "% viewed)" if MSG_Mark else ""
					# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–∏–π. 
					MSG_Series = Parts[PartIndex]["series"]

					#---> –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ —á–∞—Å—Ç–∏.
					#==========================================================================================#
					# –ï—Å–ª–∏ —á–∞—Å—Ç—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞, –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–π –∂—ë–ª—Ç—ã–π —Ü–≤–µ—Ç.
					if Options["colorize"] and "‚è≥" in MSG_MarkIndicator: TextColor = StylesGroup(text_color = Styles.Colors.Yellow)

					#---> –í—ã–≤–æ–¥ —á–∞—Å—Ç–∏.
					#==========================================================================================#
					# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏.
					StyledPrinter(f"    {PartIndex} ‚ñ∏ {MSG_Type}{MSG_Number}:{MSG_Name}{MSG_PartStatus}{MSG_MarkIndicator}", styles = TextColor)
					# –ï—Å–ª–∏ –≤ —á–∞—Å—Ç–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–π —Å–µ—Ä–∏–∏, –≤—ã–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
					if not Options["hide_single_series"] or Options["hide_single_series"] and MSG_Series and MSG_Series > 1: StyledPrinter(f"    {MSG_Indent}       {MSG_Mark}{MSG_Series} series{MSG_Progress}", styles = TextColor)

				else:
					# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–∏.
					StyledPrinter(f"    {PartIndex} ‚ñ∏ {MSG_Type}{MSG_Number}:{MSG_Name}{MSG_PartStatus}", styles = TextColor)

				# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: —Å—Å—ã–ª–∫–∏ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.
				if Options["links"] and "link" in Parts[PartIndex].keys(): print(f"    {MSG_Indent}       üîó " + Parts[PartIndex]["link"])
				if Options["comments"] and "comment" in Parts[PartIndex].keys(): print(f"    {MSG_Indent}       üí≠ " + Parts[PartIndex]["comment"])

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "AnimeTable", note: "AnimeNote"):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;
			note ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		# –û–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		self.__Table = table
		# –û–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		self.__Note = note
		# –°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥.
		self.__Commands = self.__GenerateCommands()

	def execute(self, command_data: ParsedCommandData) -> ExecutionStatus:
		"""
		–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É.
			command_data ‚Äì –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
		"""

		# –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.
		Status = None

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: delpart.
		if command_data.name == "delpart":
			# –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
			Response = Confirmation("Are you sure to remove part?")
			
			# –ï—Å–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.
			if Response:
				# –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏.
				Status = self.__Note.delete_part(int(command_data.arguments[0]))

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: downpart.
		if command_data.name == "downpart":
			# –ü–æ–¥–Ω—è—Ç–∏–µ —á–∞—Å—Ç–∏.
			Status = self.__Note.down_part(int(command_data.arguments[0]))

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: editpart.
		if command_data.name == "editpart":
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
			Data = dict()
			# –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
			if "a" in command_data.flags: Data["announced"] = True
			if "w" in command_data.flags:
				Data["watched"] = True
				Data["announced"] = "*"
				Data["skipped"] = "*"
			if "s" in command_data.flags:
				Data["watched"] = "*"
				Data["announced"] = "*"
				Data["skipped"] = True
			if "u" in command_data.flags:
				Data["watched"] = "*"
				Data["announced"] = "*"
				Data["skipped"] = "*"
			if command_data.check_key("link"): Data["link"] = command_data.get_key_value("link")
			if command_data.check_key("comment"): Data["comment"] = command_data.get_key_value("comment")
			if command_data.check_key("name"): Data["name"] = command_data.get_key_value("name")
			if command_data.check_key("number"): Data["number"] = command_data.get_key_value("number")
			if command_data.check_key("series"): Data["series"] = command_data.get_key_value("series")
			# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–∏.
			Status = self.__Note.edit_part(int(command_data.arguments[0]), Data)

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: mark.
		if command_data.name == "mark":
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏.
			Status = self.__Note.set_mark(int(command_data.arguments[0]), int(command_data.arguments[1]))

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: meta.
		if command_data.name == "meta":
			# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
			Status = ExecutionStatus(0)
			
			# –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è.
			if "set" in command_data.flags:
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
				Status = self.__Note.set_metainfo(command_data.arguments[0],  command_data.arguments[1])

			# –ï—Å–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª—è—é—Ç—Å—è.
			if "unset" in command_data.flags:
				# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
				Status = self.__Note.delete_metainfo(command_data.arguments[0])

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: newpart.
		if command_data.name == "newpart":
			# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
			Data = dict()
			# –ü–∞—Ä—Å–∏–Ω–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
			if "a" in command_data.flags: Data["announced"] = True
			if "w" in command_data.flags:
				Data["watched"] = True
				Data["announced"] = "*"
				Data["skipped"] = "*"
			if "s" in command_data.flags:
				Data["watched"] = "*"
				Data["announced"] = "*"
				Data["skipped"] = True
			if "u" in command_data.flags:
				Data["watched"] = "*"
				Data["announced"] = "*"
				Data["skipped"] = "*"
			if "comment" in command_data.keys.keys(): Data["comment"] = command_data.keys["comment"]
			if "link" in command_data.keys.keys(): Data["link"] = command_data.keys["link"]
			if "name" in command_data.keys.keys(): Data["name"] = command_data.keys["name"]
			if "number" in command_data.keys.keys(): Data["number"] = command_data.keys["number"]
			if "series" in command_data.keys.keys(): Data["series"] = command_data.keys["series"]
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏.
			Status = self.__Note.add_part(command_data.arguments[0], Data)

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: set.
		if command_data.name == "set":

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			if "altname" in command_data.keys.keys():
				# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
				Status = self.__Note.add_another_name(command_data.keys["altname"])

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –≥—Ä—É–ø–ø–∞.
			if "group" in command_data.keys.keys():
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –∫ –≥—Ä—É–ø–ø–µ.
				Status = self.__Note.set_group(int(command_data.keys["group"]))

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –æ—Ü–µ–Ω–∫–∞.
			if "estimation" in command_data.keys.keys():
				# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.
				Status = self.__Note.estimate(int(command_data.keys["estimation"]))

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ.
			if "name" in command_data.keys.keys():
				# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
				Status = self.__Note.rename(command_data.keys["name"])

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è —Å—Ç–∞—Ç—É—Å.
			if "status" in command_data.keys.keys():
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞.
				Status = self.__Note.set_status(command_data.keys["status"])

			# –ï—Å–ª–∏ –∑–∞–¥–∞—ë—Ç—Å—è —Ç–µ–≥.
			if "tag" in command_data.keys.keys():
				# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
				Status = self.__Note.add_tag(command_data.keys["tag"])

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: unset.
		if command_data.name == "unset":

			# –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			if "altname" in command_data.keys.keys():
				# –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
				Status = self.__Note.delete_another_name(command_data.keys["altname"])

			# –ï—Å–ª–∏ —É–¥–∞–ª—è–µ—Ç—Å—è —Ç–µ–≥.
			if "tag" in command_data.keys.keys():
				# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞.
				Status = self.__Note.delete_tag(command_data.keys["tag"])

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: uppart.
		if command_data.name == "uppart":
			# –ü–æ–¥–Ω—è—Ç–∏–µ —á–∞—Å—Ç–∏.
			Status = self.__Note.up_part(int(command_data.arguments[0]))

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: view.
		if command_data.name == "view":
			# –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–∏.
			self.__View()

		return Status

class AnimeTableCLI:
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI."""

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def commands(self) -> list[Command]:
		"""–°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥."""

		return self.__Commands

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __GenerateCommands(self) -> list[Command]:
		"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""

		# –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
		CommandsList = list()

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: delgroup.
		Com = Command("delgroup", "Remove group.")
		Com.add_argument(ParametersTypes.Number, "Group ID.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: list.
		Com = Command("list", "Show list of notes.")
		Com.add_flag("r", "Reverse list.")
		Com.add_key("group", ParametersTypes.Number, "Group ID.")
		Com.add_key("sort", ParametersTypes.Text, "Column name.")
		Com.add_key("search", description = "Part of note name.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: new.
		Com = Command("new", "Create new note.")
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: newgroup.
		Com = Command("newgroup", "Create new group.")
		Com.add_argument(ParametersTypes.All, "Group name.", important = True)
		CommandsList.append(Com)

		# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: search.
		Com = Command("search", "Search notes by part of name.")
		Com.add_argument(description = "Search query.", important = True)
		CommandsList.append(Com)

		return CommandsList

	def __List(self, command_data: ParsedCommandData, search: str | None = None):
		# –°–ø–∏—Å–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π.
			Notes = list()
			# –¢–∞–±–ª–∏—á–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
			Content = {
				"ID": [],
				"Status": [],
				"Name": [],
				"Estimation": [],
				"Group": []
			}
			# –†–µ–∂–∏–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.
			SortBy = command_data.keys["sort"].title() if "sort" in command_data.keys.keys() else "ID"
			# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤ –≤–µ—Ä—Ö–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä ID.
			if SortBy == "Id": SortBy = SortBy.upper()
			# –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏, –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É.
			if SortBy not in Content.keys(): return ExecutionError(-1, "bad_sorting_parameter")
			# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è —Ñ–ª–∞–≥–∞ –∏–Ω–≤–µ—Ä—Å–∏–∏ –≤—ã–≤–æ–¥–∞.
			Reverse = command_data.check_flag("r")
			
			# –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
			if self.__Table.notes:

				# –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –≥—Ä—É–ø–ø–µ.
				if "group" in command_data.keys.keys():

					# –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.
					for Note in self.__Table.notes:
						# –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –∫ –∏—Å–∫–æ–º–æ–π –≥—Ä—É–ø–ø–µ, –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —Å–ø–∏—Å–æ–∫ –≤—ã–≤–æ–¥–∞.
						if Note.group_id == int(command_data.keys["group"]): Notes.append(Note)

				else: Notes = self.__Table.notes

				# –ï—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω –ø–æ–∏—Å–∫.
				if search:
					# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.
					print("Search:", TextStyler(search, text_color = Styles.Colors.Yellow))
					# –ö–æ–ø–∏—è –∑–∞–ø–∏—Å–µ–π.
					NotesCopy = list(Notes)
					# –ë—É—Ñ–µ—Ä –ø–æ–∏—Å–∫–∞.
					SearchBuffer = list()

					# –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.
					for Note in NotesCopy:
						# –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π.
						Names = list()
						# –ó–∞–ø–∏—Å—å –Ω–∞–∑–≤–∞–Ω–∏–π.
						if Note.name: Names.append(Note.name)
						if Note.another_names: Names += Note.another_names

						# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
						for Name in Names:
							# –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, –∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ.
							if search.lower() in Name.lower(): SearchBuffer.append(Note)

					# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –ø–æ–∏—Å–∫–∞.
					Notes = SearchBuffer
				
				# –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.
				for Note in Notes:
					# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
					Name = Note.name if Note.name else ""
					GroupName = f"@{Note.group_id}" if not self.__Table.get_group(Note.group_id) else self.__Table.get_group(Note.group_id)["name"]
					if GroupName == "@None": GroupName = ""
					Status = Note.status
					# –í—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ü–≤–µ—Ç–æ–º.
					if Status == "announced": Status = TextStyler(Status, text_color = Styles.Colors.Purple)
					if Status == "planned": Status = TextStyler(Status, text_color = Styles.Colors.Cyan)
					if Status == "watching": Status = TextStyler(Status, text_color = Styles.Colors.Yellow)
					if Status == "completed": Status = TextStyler(Status, text_color = Styles.Colors.Green)
					if Status == "dropped": Status = TextStyler(Status, text_color = Styles.Colors.Red)
					# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–ª–æ–Ω–æ–∫.
					Content["ID"].append(Note.id)
					Content["Status"].append(Status)
					Content["Name"].append(Name if len(Name) < 60 else Name[:60] + "‚Ä¶")
					Content["Estimation"].append(Note.estimation if Note.estimation else "")
					Content["Group"].append(GroupName)

				# –ë—É—Ñ–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞—á–µ–Ω–∏—è.
				ContentBuffer = list(Content["Group"])
				while "" in ContentBuffer: ContentBuffer.remove("")
				# –ï—Å–ª–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç –≥—Ä—É–ø–ø, —É–¥–∞–ª–∏—Ç—å –∏—Ö –∫–æ–ª–æ–Ω–∫—É.
				if len(ContentBuffer) == 0: del Content["Group"]
				# –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è.
				Columns(Content, sort_by = SortBy, reverse = Reverse)

			else:
				# –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å: —Ç–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞.
				print("Table is empty.")

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "AnimeTable"):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		# –û–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		self.__Table = table
		# –°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥.
		self.__Commands = self.__GenerateCommands()

	def execute(self, command_data: ParsedCommandData) -> ExecutionStatus:
		"""
		–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É.
			command_data ‚Äì –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
		"""

		# –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.
		Status = None

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: delgroup.
		if command_data.name == "delgroup":
			# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.
			Status = self.__Table.remove_group(command_data.arguments[0])

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: list.
		if command_data.name == "list":
			# –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π.
			self.__List(command_data)

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: new.
		if command_data.name == "new":
			# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
			Status = self.__Table.create_note()

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: newgroup.
		if command_data.name == "newgroup":
			# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.
			Status = self.__Table.create_group(command_data.arguments[0])

		# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: search.
		if command_data.name == "search":
			# –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏.
			self.__List(command_data, command_data.arguments[0])

		return Status
	
#==========================================================================================#
# >>>>> –û–°–ù–û–í–ù–´–ï –ö–õ–ê–°–°–´ <<<<< #
#==========================================================================================#

class AnimeNote:
	"""–ó–∞–ø–∏—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞."""

	#==========================================================================================#
	# >>>>> –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	# –ü—É—Å—Ç–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø–∏—Å–∏.
	BASE_NOTE = {
		"name": None,
		"another_names": [],
		"estimation": None,
		"status": None,
		"group": None,
		"tags": [],
		"metainfo": {},
		"parts": []
	}

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def cli(self) -> AnimeNoteCLI:
		"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI –∑–∞–ø–∏—Å–∏."""

		return self.__NoteCLI

	@property
	def another_names(self) -> list[str]:
		"""–°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π."""

		return self.__Data["another_names"]

	@property
	def emoji_status(self) -> str:
		"""–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –≤–∏–¥–∑–µ —ç–º–æ–¥–∑–∏."""

		# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.
		Statuses = {
			"announced": "‚ÑπÔ∏è",
			"watching": "‚ñ∂Ô∏è",
			"completed": "‚úÖ",
			"dropped": "‚õî",
			"planned": "üóìÔ∏è",
			None: ""
		}

		return Statuses[self.__Data["status"]]

	@property
	def estimation(self) -> int | None:
		"""–û—Ü–µ–Ω–∫–∞."""

		return self.__Data["estimation"]

	@property
	def group_id(self) -> int | None:
		"""–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã."""

		return self.__Data["group"]

	@property
	def id(self) -> int:
		"""–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."""

		return self.__ID

	@property
	def metainfo(self) -> dict:
		"""–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."""

		return self.__Data["metainfo"]

	@property
	def name(self) -> str | None:
		"""–ù–∞–∑–≤–∞–Ω–∏–µ."""

		return self.__Data["name"]

	@property
	def parts(self) -> list[dict]:
		"""–°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π."""

		return list(self.__Data["parts"])

	@property
	def progress(self) -> float:
		"""–ü—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

		# –ü—Ä–æ–≥—Ä–µ—Å—Å.
		Progress = 0
		# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
		MaxProgress = 0
		# –¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å.
		CurrentProgress = 0
		# –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π.
		Parts = self.parts

		# –ï—Å–ª–∏ –µ—Å—Ç—å —á–∞—Å—Ç–∏.
		if Parts:

			# –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
			for Part in self.parts:

				# –ï—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞.
				if "announced" not in Part.keys() and "skipped" not in Part.keys():

					# –ï—Å–ª–∏ –µ—Å—Ç—å —Å–µ—Ä–∏–∏.
					if "series" in Part.keys() and Part["series"] != None:
						# –ü–æ–¥—Å—á—ë—Ç —Å–µ—Ä–∏–π.
						MaxProgress += Part["series"]

					else:
						# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç.
						MaxProgress += 1

			# –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
			for Part in self.parts:

				# –ï—Å–ª–∏ —á–∞—Å—Ç—å –Ω–µ –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–∞ –∏ –Ω–µ –ø—Ä–æ–ø—É—â–µ–Ω–∞.
				if "announced" not in Part.keys() and "skipped" not in Part.keys():

					# –ï—Å–ª–∏ —á–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –µ—Å—Ç—å —Å–µ—Ä–∏–∏.
					if "watched" in Part.keys() and "series" in Part.keys() and Part["series"] != None:
						# –ü–æ–¥—Å—á—ë—Ç —Å–µ—Ä–∏–π.
						CurrentProgress += Part["series"] if "mark" not in Part.keys() else Part["mark"]

					elif "watched" in Part.keys():
						# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç.
						CurrentProgress += 1

			# –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
			Progress = round(float(CurrentProgress / MaxProgress * 100), 1)
			# –ï—Å–ª–∏ –º–æ–∂–Ω–æ –æ–∫—Ä—É–≥–ª–∏—Ç—å –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ.
			if str(Progress).endswith(".0"): Progress = int(Progress)

		return Progress

	@property
	def status(self) -> str | None:
		"""–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

		return self.__Data["status"]

	@property
	def tags(self) -> list[str]:
		"""–°–ø–∏—Å–æ–∫ —Ç–µ–≥–æ–≤."""

		return list(self.__Data["tags"])

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __GetBasePart(self, part_type: str) -> dict:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å–ª–æ–≤–∞—Ä–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —á–∞—Å—Ç–∏.
			part_type ‚Äì —Ç–∏–ø —á–∞—Å—Ç–∏.
		"""

		# –¢–∏–ø—ã: —Å–µ–∑–æ–Ω.
		if part_type in ["season"]: return {
			"type": part_type,
			"number": None,
			"series": None
		}

		# –¢–∏–ø—ã: —Ñ–∏–ª—å–º.
		if part_type in ["film", "special"]: return {
			"type": part_type,
			"name": None
		}

		# –¢–∏–ø—ã: ONA, OVA, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤—ã–ø—É—Å–∫–∏.
		if part_type in ["ONA", "OVA", "specials"]: return {
			"type": part_type,
			"series": None
		}

	def __ModifyPart(self, part: dict, data: dict) -> dict:
		"""
		–ü–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∏–ø–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —á–∞—Å—Ç—å.
			part ‚Äì —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏;
			data ‚Äì —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤ —á–∞—Å—Ç—å.
		"""
		
		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
		for Key in data.keys():

			# –ï—Å–ª–∏ —Å–≤–æ–π—Å—Ç–≤–æ —á–∞—Å—Ç–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∏ —Ç–∞–∫–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –µ—Å—Ç—å.
			if data[Key] == "*" and Key in part.keys():
				# –£–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
				del part[Key]

			# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
			elif data[Key] != "*":
				# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
				part[Key] = data[Key]

			#---> –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤.
			#==========================================================================================#

			# –ï—Å–ª–∏ —á–∞—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É, —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É.
			if "watched" in part.keys() and "mark" in part.keys(): del part["mark"]
			# –ï—Å–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞ –∏ –∏–º–µ–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É, —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–ª–∞–¥–∫—É.
			if "skipped" in part.keys() and "mark" in part.keys(): del part["mark"]

		return part

	def __UpdateStatus(self):
		"""–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

		# –ï—Å–ª–∏ –Ω–µ –∑–∞–±—Ä–æ—à–µ–Ω–æ.
		if self.__Data["status"] != "dropped":
			# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞.
			Progress = self.progress
			# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤.
			if Progress == None: self.__Data["status"] = None
			elif Progress == 100: self.__Data["status"] = "completed"
			else: self.__Data["status"] = "watching"

		# –ï—Å–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–≤–µ—Ä—à—ë–Ω.
		if self.__Data["status"] == "completed":

			# –î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏.
			for Part in self.__Data["parts"]:

				# –ï—Å–ª–∏ —á–∞—Å—Ç—å —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–æ–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π.
				if "announced" in Part.keys():
					# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏.
					self.__Data["status"] = "announced"
					# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞.
					break

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "AnimeTable", note_id: int):
		"""
		–ó–∞–ø–∏—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		# ID –∑–∞–ø–∏—Å–∏.
		self.__ID = note_id
		# –û–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		self.__Table = table
		# –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
		self.__Data = ReadJSON(f"{table.directory}/{table.name}/{self.__ID}.json")
		# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI –∑–∞–ø–∏—Å–∏.
		self.__NoteCLI = AnimeNoteCLI(table, self)
	
	def add_another_name(self, another_name: str) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			another_name ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ —Ç–∞–∫–æ–µ –∞–ª—å—Ç—Ä–µ–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω–æ.
			if another_name not in self.__Data["another_names"]:
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–ª—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è.
				self.__Data["another_names"].append(another_name)
				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
				self.save()
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
				Status.message = "Another name added."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def add_part(self, part_type: str, data: dict) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —á–∞—Å—Ç—å.
			part_type ‚Äì —Ç–∏–ø —á–∞—Å—Ç–∏;
			data ‚Äì –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —á–∞—Å—Ç–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ë—É—Ñ–µ—Ä —á–∞—Å—Ç–∏.
			Buffer = self.__GetBasePart(part_type)
			# –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
			Buffer = self.__ModifyPart(Buffer, data)
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —á–∞—Å—Ç–∏.
			self.__Data["parts"].append(Buffer)
			# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
			self.__UpdateStatus()
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Part created."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def add_tag(self, tag: str) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥.
			tag ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ —Ç–µ–≥ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω.
			if tag not in self.__Data["tags"]:
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–≥–∞.
				self.__Data["tags"].append(tag)
				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
				self.save()
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
				Status.message = "Tag added."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def delete_another_name(self, another_name: int | str) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			another_name ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏–Ω–¥–µ–∫—Å.
			if another_name.isdigit():
				# –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∏–Ω–¥–µ–∫—Å—É.
				self.__Data["another_names"].pop(int(another_name))

			else:
				# –£–¥–∞–ª–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.
				self.__Data["another_names"].remove(another_name)

			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Another name removed."

		except IndexError:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(1, "incorrect_another_name_index")

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def delete_metainfo(self, key: str) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
			key ‚Äì –∫–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
			del self.__Data["metainfo"][key]
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Metainfo updated."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def delete_part(self, part_index: int) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç —á–∞—Å—Ç—å.
			index ‚Äì –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Å—Ç–∏.
			del self.__Data["parts"][part_index]
			# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
			self.__UpdateStatus()
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Part deleted."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def delete_tag(self, tag: int | str) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç —Ç–µ–≥.
			tag ‚Äì —Ç–µ–≥ –∏–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∏–Ω–¥–µ–∫—Å.
			if tag.isdigit():
				# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É.
				self.__Data["tags"].pop(int(tag))

			else:
				# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é.
				self.__Data["tags"].remove(tag)

			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
			Status.message = "Tag removed."

		except IndexError:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionStatus(1, "incorrect_tag_index")

		except IndexError:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def down_part(self, part_index: int) -> ExecutionStatus:
		"""
		–û–ø—É—Å–∫–∞–µ—Ç —á–∞—Å—Ç—å –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–Ω–∏–∑.
			part_index ‚Äì –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å.
			if part_index != len(self.__Data["parts"]) - 1:
				# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –≤–Ω–∏–∑.
				self.__Data["parts"].insert(part_index + 1, self.__Data["parts"].pop(part_index))
				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
				self.save()
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
				Status.message = "Part downed."

			# –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å.
			elif part_index == len(self.__Data["parts"]) - 1:
				# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
				Status = ExecutionWarning(1, "unable_down_last_part")

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def edit_part(self, part_index: int, data: dict) -> ExecutionStatus:
		"""
		–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ —á–∞—Å—Ç–∏.
			part_index ‚Äì –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏;
			data ‚Äì –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–≤–æ–π—Å—Ç–≤ —á–∞—Å—Ç–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ü–æ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö.
			self.__Data["parts"][part_index] = self.__ModifyPart(self.__Data["parts"][part_index], data)
			# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
			self.__UpdateStatus()
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Part edited."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def estimate(self, estimation: int) -> ExecutionStatus:
		"""
		–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É.
			estimation ‚Äì –æ—Ü–µ–Ω–∫–∞.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.
			if estimation <= self.__Table.options["max_estimation"]:
				# –í—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏.
				self.__Data["estimation"] = estimation
				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
				self.save()
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.
				Status.message = "Estimation updated."

			else:
				# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
				Status = ExecutionError(1, "max_estimation_exceeded")

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def rename(self, name: str) -> ExecutionStatus:
		"""
		–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å.
			name ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏.
			self.__Data["name"] = name
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Name updated."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def reset(self, key: str) -> ExecutionStatus:
		"""
		–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –ø–æ–ª–µ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é.
			key ‚Äì –∫–ª—é—á –ø–æ–ª—è.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è.
			self.__Data[key] = type(self.BASE_NOTE[key])()
			# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
			self.__UpdateStatus()
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def save(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."""

		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		WriteJSON(f"{self.__Table.directory}/{self.__Table.name}/{self.__ID}.json", self.__Data)

	def set_group(self, group_id: int) -> ExecutionStatus:
		"""
		–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –≥—Ä—É–ø–ø–µ.
			group_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è.
			self.__Data["group"] = group_id
			# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –≥—Ä—É–ø–ø—É.
			self.__Table.add_group_element(group_id, self.__ID)
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = f"Note has been added to @{group_id} group."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def set_mark(self, part_index: int, mark: int) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–ª–∞–¥–∫—É –Ω–∞ —Å–µ—Ä–∏—é.
			part_index ‚Äì –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏;
			mark ‚Äì –Ω–æ–º–µ—Ä —Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–∫–ª–∞–¥–∫–∏ (0 –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–ª–∞–¥–∫–∏, –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Ä–∏–∏ –¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –≤—Å–µ–π —á–∞—Å—Ç–∏ –∫–∞–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–π).
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ —á–∞—Å—Ç—å –º–Ω–æ–≥–æ—Å–µ—Ä–∏–π–Ω–∞—è.
			if "series" in self.__Data["parts"][part_index].keys():

				# –ï—Å–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—É—é —á–∞—Å—Ç—å.
				if "watched" in self.__Data["parts"][part_index].keys():
					# –°–Ω—è—Ç–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏.
					del self.__Data["parts"][part_index]["watched"]
					self.__Data["parts"][part_index]["mark"] = mark
					# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
					self.__UpdateStatus()
					# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
					self.save()
					# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
					Status.message = "Part marked as unseen."

				# –ï—Å–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é —á–∞—Å—Ç—å.
				elif "skipped" in self.__Data["parts"][part_index].keys():
					# –°–Ω—è—Ç–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–ø—É—Å–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–∫–ª–∞–¥–∫–∏.
					del self.__Data["parts"][part_index]["skipped"]
					self.__Data["parts"][part_index]["mark"] = mark
					# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
					self.__UpdateStatus()
					# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
					self.save()
					# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
					Status.message = "Part marked as unskipped."

				else:

					# –ï—Å–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ –ª–µ–∂–∏—Ç –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ —Å–µ—Ä–∏–π.
					if mark < self.__Data["parts"][part_index]["series"] and mark != 0:
						# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏.
						self.__Data["parts"][part_index]["mark"] = mark
						# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
						Status.message = "Mark updated."

					# –ï—Å–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–µ—Ä–∏–∏.
					elif mark == self.__Data["parts"][part_index]["series"]:
						# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω–æ–≥–æ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏.
						self.__Data["parts"][part_index]["watched"] = True
						if "mark" in self.__Data["parts"][part_index].keys(): del self.__Data["parts"][part_index]["mark"]
						# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
						Status.message = "Part marked as fully viewed."

					# –ï—Å–ª–∏ –∑–∞–∫–ª–∞–¥–∫–∞ –Ω–∞ –Ω—É–ª–µ–≤–æ–π —Å–µ—Ä–∏–∏.
					elif mark == 0:
						# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–ª–∞–¥–∫–∏.
						del self.__Data["parts"][part_index]["mark"]
						# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
						Status.message = "Mark removed."

					# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
					self.save()
					# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
					self.__UpdateStatus()

			else:
				# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
				Status = ExecutionError(-2, "only_series_supports_marks")

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def set_metainfo(self, key: str, metainfo: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
			key ‚Äì –∫–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö;
			metainfo ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
			self.__Data["metainfo"][key] = metainfo
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Metainfo updated."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def set_status(self, status: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å.
			status ‚Äì —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)
		# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.
		Statuses = {
			"a": "announced",
			"w": "watching",
			"c": "completed",
			"d": "dropped",
			"p": "planned",
			"*": None
		}

		try:
			# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –µ–≥–æ –≤ –ø–æ–ª–Ω—ã–π.
			if status in Statuses.keys(): status = Statuses[status]
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞.
			self.__Data["status"] = status
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
			self.save()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Status updated."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def up_part(self, part_index: int) -> ExecutionStatus:
		"""
		–ü–æ–¥–Ω–∏–º–∞–µ—Ç —á–∞—Å—Ç—å –Ω–∞ –æ–¥–Ω—É –ø–æ–∑–∏—Ü–∏—é –≤–≤–µ—Ä—Ö.
			part_index ‚Äì –∏–Ω–¥–µ–∫—Å —á–∞—Å—Ç–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:

			# –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å.
			if part_index != 0:
				# –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á–∞—Å—Ç–∏ –≤–≤–µ—Ä—Ö.
				self.__Data["parts"].insert(part_index - 1, self.__Data["parts"].pop(part_index))
				# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
				self.save()
				# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
				Status.message = "Part upped."

			# –ï—Å–ª–∏ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å.
			elif part_index == 0:
				# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
				Status = ExecutionWarning(1, "unable_up_first_part")

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

class AnimeTable:
	"""–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –º–µ–¥–∏–∞–∫–Ω–æ—Ç–µ–Ω—Ç–∞."""

	#==========================================================================================#
	# >>>>> –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ê–¢–†–ò–ë–£–¢–´ <<<<< #
	#==========================================================================================#

	# –¢–∏–ø —Ç–∞–±–ª–∏—Ü—ã.
	type = "anime"

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def cli(self) -> AnimeTableCLI:
		"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__TableCLI

	@property
	def directory(self) -> str:
		"""–ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__StorageDirectory

	@property
	def id(self) -> list[AnimeNote]:
		"""–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Notes.values()

	@property
	def max_estimation(self) -> int:
		"""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞."""

		return self.__Options["max_estimation"]

	@property
	def name(self) -> str:
		"""–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Name

	@property
	def notes(self) -> list[AnimeNote]:
		"""–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π."""

		return self.__Notes.values()

	@property
	def options(self) -> dict:
		"""–°–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Options.copy()	

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __Create(self):
		"""–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏ —Ñ–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã."""

		# –ï—Å–ª–∏ –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ.
		if not os.path.exists(f"{self.__StorageDirectory}/{self.__Name}"): os.makedirs(f"{self.__StorageDirectory}/{self.__Name}")
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è.
		WriteJSON(f"{self.__StorageDirectory}/{self.__Name}/manifest.json", self.__Options)

	def __GetNewID(self, container: dict) -> int:
		"""
		–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.
			container ‚Äì –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.
		"""

		# –ù–æ–≤—ã–π ID.
		NewID = None

		# –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –æ—Å–≤–æ–±–æ–¥–∏–≤—à–∏—Ö—Å—è ID.
		if self.__Options["recycle_id"]:
			# –°–ø–∏—Å–æ–∫ ID.
			ListID = container.keys()

			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è ID –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.
			for ID in range(1, len(ListID) + 1):

				# –ï—Å–ª–∏ ID —Å–≤–æ–±–æ–¥–µ–Ω.
				if ID not in ListID:
					# –í—ã–±–æ—Ä ID.
					NewID = ID
					# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ü–∏–∫–ª–∞.
					break

		# –ï—Å–ª–∏ ID –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.
		if not NewID:
			# –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ ID –º–µ—Ç–æ–¥–æ–º –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ.
			NewID = int(max(container.keys())) + 1 if len(container.keys()) > 0 else 1

		return NewID

	def __GetNotesListID(self) -> list[int]:
		"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—É—Ç—ë–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ JSON."""

		# –°–ø–∏—Å–æ–∫ ID.
		ListID = list()
		# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ.
		Files = os.listdir(f"{self.__StorageDirectory}/{self.__Name}")
		# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Ñ–æ—Ä–º–∞—Ç–∞ JSON.
		Files = list(filter(lambda File: File.endswith(".json"), Files))

		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
		for File in Files: 
			# –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —É–¥–∞–ª–∏—Ç—å –µ–≥–æ.
			if not File.replace(".json", "").isdigit(): Files.remove(File)

		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ–ª—É—á–∏—Ç—å –∏ –∑–∞–ø–∏—Å–∞—Ç—å ID.
		for File in Files: ListID.append(int(File.replace(".json", "")))
		
		return ListID

	def __ReadNote(self, note_id: int):
		"""
		–°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏.
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		# –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		self.__Notes[note_id] = AnimeNote(self, note_id)

	def __ReadNotes(self):
		"""–°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π."""

		# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ ID –∑–∞–ø–∏—Å–µ–π.
		ListID = self.__GetNotesListID()

		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ ID –∑–∞–ø–∏—Å–∏.
		for ID in ListID:
			# –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
			self.__ReadNote(ID)

	def __SaveGroups(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."""

		# –ï—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø –æ—Å—Ç–∞–ª–∏—Å—å.
		if len(self.__Groups.keys()) > 0:
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ JSON.
			WriteJSON(f"{self.__StorageDirectory}/{self.__Name}/groups.json", self.__Groups)

		else:
			# –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
			os.remove(f"{self.__StorageDirectory}/{self.__Name}/groups.json")

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#
	
	def __init__(self, storage_dir: str, name: str, autocreation: bool = True):
		"""
		–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –º–µ–¥–∏–∞–∫–Ω–æ—Ç–µ–Ω—Ç–∞.
			storage_dir ‚Äì –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü;
			name ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;
			autocreation ‚Äì —É–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–∞–∫–æ–≤–æ–π. 
		"""
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü.
		self.__StorageDirectory = storage_dir.rstrip("/\\")
		# –ò–º—è —Ç–∞–±–ª–∏—Ü—ã.
		self.__Name = name
		# –°–ª–æ–≤–∞—Ä—å –∑–∞–ø–∏—Å–µ–π.
		self.__Notes = dict()
		# –°–ª–æ–≤–∞—Ä—å –≥—Ä—É–ø–ø.
		self.__Groups = dict()
		# –¢–∏–ø —Ç–∞–±–ª–∏—Ü—ã.
		self.__Type = "anime"
		# –û–ø—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü—ã.
		self.__Options = {
			"version": 1,
			"type": self.__Type,
			"recycle_id": False,
			"max_estimation": 10,
			"viewer": {
				"links": True,
				"comments": True,
				"colorize": True,
				"hide_single_series": True
			}
		}
		# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI —Ç–∞–±–ª–∏—Ü—ã.
		self.__TableCLI = AnimeTableCLI(self)

		# –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã.
		if os.path.exists(f"{self.__StorageDirectory}/{self.__Name}/manifest.json"):
			# –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞.
			self.__Options = ReadJSON(f"{self.__StorageDirectory}/{self.__Name}/manifest.json")
			# –ï—Å–ª–∏ —Ç–∏–ø —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
			if self.__Options["type"] != self.__Type: raise TypeError(f"Only \"{self.__Type}\" type tables supported.")
			# –ß—Ç–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π.
			self.__ReadNotes()

		# –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		elif autocreation:
			# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
			self.__Create()

		# –í—ã–±—Ä–æ—Å –∏—Å–∫–ª—é—á–µ–Ω–∏—è
		else: raise FileExistsError("manifest.json")

		# –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª –æ–ø–∏—Å–∞–Ω–∏—è –≥—Ä—É–ø–ø.
		if os.path.exists(f"{self.__StorageDirectory}/{self.__Name}/groups.json"):
			# –ß—Ç–µ–Ω–∏–µ –≥—Ä—É–ø–ø.
			self.__Groups = ReadJSON(f"{self.__StorageDirectory}/{self.__Name}/groups.json")

	def add_group_element(self, group_id: int, note_id: int):
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ –≤ —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä—É–ø–ø—ã.
			group_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã;
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		# –î–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã.
		Group = self.get_group(group_id)
		# –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –µ—â—ë –Ω–µ –≤ –≥—Ä—É–ø–ø–µ, –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ.
		if note_id not in Group["elements"]: Group["elements"].append(note_id)
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
		self.__SaveGroups()

	def create_group(self, name: str) -> ExecutionStatus:
		"""
		–°–æ–∑–¥–∞—ë—Ç –≥—Ä—É–ø–ø—É –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π.
			name ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# ID –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã.
			ID = self.__GetNewID(self.__Groups)
			# –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≥—Ä—É–ø–ø—ã.
			self.__Groups[str(ID)] = {
				"name": name,
				"elements": []
			}
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
			self.__SaveGroups()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = f"Group @{ID} created."


		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def create_note(self) -> ExecutionStatus:
		"""–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å."""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# ID –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏.
			ID = self.__GetNewID(self.__Notes)
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ JSON.
			WriteJSON(f"{self.__StorageDirectory}/{self.__Name}/{ID}.json", AnimeNote.BASE_NOTE)
			# –ß—Ç–µ–Ω–∏–µ –∏ –æ–±—ä–µ–∫—Ç–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏.
			self.__ReadNote(ID)
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status = f"Note #{ID} created."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def rename(self, name: str) -> ExecutionStatus:
		"""
		–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
			name ‚Äì –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞.
			os.rename(f"{self.__StorageDirectory}/{self.__Name}", f"{self.__StorageDirectory}/{name}")
			# –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏.
			self.__Name = name
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Table renamed."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status
		
	def remove_group(self, group_id: int) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –≥—Ä—É–ø–ø—É. 
			group_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ID –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É.
			group_id = str(group_id)
			# –£–¥–∞–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
			del self.__Groups[group_id]
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª.
			self.__SaveGroups()
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = f"Group @{group_id} removed."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def remove_note(self, note_id: int) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. 
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ID –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É.
			note_id = int(note_id)
			# –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.
			del self.__Notes[note_id]
			# –£–¥–∞–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.
			os.remove(f"{self.__StorageDirectory}/{self.__Name}/{note_id}.json")
			# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
			Status.message = "Note removed."

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unknown_error")

		return Status

	def get_group(self, group_id: int) -> dict | None:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
			group_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.
		"""

		# –ì—Ä—É–ø–ø–∞.
		Group = None
		# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ID –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É.
		group_id = str(group_id)
		# –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–ø–∏—Å–∞—Ç—å –µ—ë –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.
		if group_id in self.__Groups.keys(): Group = self.__Groups[group_id]

		return Group

	def get_group_notes(self, group_id: int) -> list[AnimeNote]:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã.
			group_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≥—Ä—É–ø–ø—ã.
		"""

		# –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π.
		NotesList = list()
		
		# –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏.
		for Note in self.notes:
			# –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤–∫–ª—é—á–µ–Ω–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É, –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —Å–ø–∏—Å–æ–∫.
			if Note.group == group_id: NotesList.append(Note)

		return NotesList

	def get_note(self, note_id: int) -> ExecutionStatus:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		# –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
		Status = ExecutionStatus(0)

		try:
			# –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ID –∫ —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–º—É —Ç–∏–ø—É.
			note_id = int(note_id)
			# –û—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–ø–∏—Å–∏.
			Status.value = self.__Notes[note_id]

		except:
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			Status = ExecutionError(-1, "unkonwn_error")

		return Status