from Source.CLI.Templates import Columns
from Source.Core.Exceptions import *
from Source.Core.Errors import *

from dublib.CLI.Terminalyzer import ParametersTypes, Command, ParsedCommandData
from dublib.CLI.StyledPrinter import Styles, StyledPrinter, TextStyler
from dublib.Engine.Bus import ExecutionError, ExecutionStatus
from dublib.Methods.JSON import ReadJSON, WriteJSON

import os

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ó–ê–ò–ú–û–î–ï–ô–°–¢–í–ò–ô –° –¢–ê–ë–õ–ò–¶–ï–ô <<<<< #
#==========================================================================================#

class BattleTech_Books_NoteCLI:
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é —á–µ—Ä–µ–∑ CLI."""

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def commands(self) -> list[Command]:
		"""–°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥."""

		return self.__Commands

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __ErasToNames(self, eras_id: list[int]) -> list[str]:
		"""
		–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ ID —ç–ø–æ—Ö BattleTech –≤ —Å–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π.
			eras_id ‚Äì —Å–ø–∏—Å–æ–∫ ID.
		"""

		Names = list()
		for EraID in eras_id: Names.append(self.__Table.eras[EraID])

		return Names

	def __GenerateCommands(self) -> list[Command]:
		"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""

		CommandsList = list()

		Com = Command("comment", "Set comment to note.")
		Com.add_argument(description = "Comment text or * to remove.", important = True)
		CommandsList.append(Com)

		Com = Command("estimate", "Set estimation.")
		Com.add_argument(ParametersTypes.Number, description = "Estimation.", important = True)
		CommandsList.append(Com)

		Com = Command("link", "Attach link to note.")
		Com.add_argument(description = "URL or * to remove.", important = True)
		CommandsList.append(Com)

		Com = Command("mark", "Set bookmark.")
		Com.add_argument(ParametersTypes.Number, description = "Page number or * to remove.", important = True)
		CommandsList.append(Com)

		Com = Command("meta", "Manage note metainfo fields.")
		Com.add_argument(ParametersTypes.All, description = "Field name.", important = True)
		Com.add_argument(ParametersTypes.All, description = "Field value.")
		ComPos = Com.create_position("OPERATION", "Type of operation with metainfo.", important = True)
		ComPos.add_flag("set", description = "Create new or update exists field.")
		ComPos.add_flag("unset", description = "Remove field.")
		CommandsList.append(Com)

		Com = Command("set", "Set note values.")
		Com.add_key("altname", description = "Alternative name.")
		Com.add_key("era", ParametersTypes.Number, description = "Era ID.")
		Com.add_key("localname", description = "Localized name.")
		Com.add_key("name", description = "Note name.")
		Com.add_key("status", description = "View status.")
		CommandsList.append(Com)

		Com = Command("unset", "Remove alternative names or eras.")
		ComPos = Com.create_position("TARGET", "Target to remove.", important = True)
		ComPos.add_key("altname", ParametersTypes.All, "Index of alternative name or alternative name.")
		Com.add_key("era", ParametersTypes.Number, description = "Era ID.")
		CommandsList.append(Com)

		Com = Command("view", "View note in console.")
		CommandsList.append(Com)

		return CommandsList

	def __View(self):
		"""–í—ã–≤–æ–¥–∏—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏."""

		#---> –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
		#==========================================================================================#
		UsedName = None
		AnotherNames = list()

		if self.__Note.localized_name:
			UsedName = self.__Note.localized_name
			AnotherNames.append(self.__Note.name)

		else:
			UsedName = self.__Note.name

		AnotherNames += self.__Note.another_names

		#---> –í—ã–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.
		#==========================================================================================#
		if UsedName: StyledPrinter(UsedName, decorations = [Styles.Decorations.Bold], end = False)
		print(f" {self.__Note.emoji_status}")
		if self.__Note.estimation: print(f"‚≠ê {self.__Note.estimation} / {self.__Table.max_estimation}")
		if self.__Note.bookmark: print(f"üîñ {self.__Note.bookmark} page")
		if self.__Note.comment: print(f"üí≠ {self.__Note.comment}")
		if self.__Note.link: print(f"üîó {self.__Note.link}")
		if AnotherNames: StyledPrinter(f"ANOTHER NAMES: ", decorations = [Styles.Decorations.Bold])
		for AnotherName in AnotherNames: StyledPrinter(f"    {AnotherName}", decorations = [Styles.Decorations.Italic])

		#---> –í—ã–≤–æ–¥ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –∑–∞–ø–∏—Å–∏.
		#==========================================================================================#

		if self.__Note.eras:
			StyledPrinter(f"ERAS: ", decorations = [Styles.Decorations.Bold])
			for Era in self.__ErasToNames(self.__Note.eras): StyledPrinter(f"    {Era}", decorations = [Styles.Decorations.Italic])

		if self.__Note.metainfo:
			StyledPrinter(f"METAINFO:", decorations = [Styles.Decorations.Bold])
			MetaInfo = self.__Note.metainfo
			
			for Key in MetaInfo.keys():
				CustomMetainfoMarker = "" if Key in self.__Table.metainfo_rules.keys() else "*"
				print(f"    {CustomMetainfoMarker}{Key}: " + str(MetaInfo[Key]))

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "BattleTech_Books_Table", note: "BattleTech_Books_Note"):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;
			note ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Table = table
		self.__Note = note
		self.__Commands = self.__GenerateCommands()

	def execute(self, command_data: ParsedCommandData) -> ExecutionStatus:
		"""
		–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É.
			command_data ‚Äì –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
		"""

		Status = None

		if command_data.name == "comment":
			Status = self.__Note.set_comment(command_data.arguments[0])

		if command_data.name == "estimate":
			Status = self.__Note.estimate(command_data.arguments[0])

		if command_data.name == "link":
			Status = self.__Note.set_link(command_data.arguments[0])

		if command_data.name == "mark":
			Status = self.__Note.set_bookmark(command_data.arguments[0])

		if command_data.name == "meta":
			Status = ExecutionStatus(0)
			
			if "set" in command_data.flags:
				Status = self.__Note.set_metainfo(command_data.arguments[0],  command_data.arguments[1])

			if command_data.check_flag("unset"):
				Status = self.__Note.delete_metainfo(command_data.arguments[0])

		if command_data.name == "set":

			if "altname" in command_data.keys.keys():
				Status = self.__Note.add_another_name(command_data.keys["altname"])

			if command_data.check_key("era"):
				Status = self.__Note.add_era(command_data.get_key_value("era"))

			if "localname" in command_data.keys.keys():
				Status = self.__Note.rename(command_data.keys["localname"], localized = True)

			if "name" in command_data.keys.keys():
				Status = self.__Note.rename(command_data.keys["name"])

			if "status" in command_data.keys.keys():
				Status = self.__Note.set_status(command_data.keys["status"])

		if command_data.name == "unset":

			if command_data.check_key("altname"):
				Status = self.__Note.delete_another_name(command_data.get_key_value("altname"))

			if command_data.check_key("era"):
				Status = self.__Note.delete_era(command_data.get_key_value("era"))

		if command_data.name == "view":
			self.__View()

		return Status

class BattleTech_Books_TableCLI:
	"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI."""

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def commands(self) -> list[Command]:
		"""–°–ø–∏—Å–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥."""

		return self.__Commands

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __GenerateCommands(self) -> list[Command]:
		"""–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."""

		CommandsList = list()

		Com = Command("eras", "Show list of BattleTech eras.")
		CommandsList.append(Com)

		Com = Command("list", "Show list of notes.")
		Com.add_flag("r", "Reverse list.")
		Com.add_key("group", ParametersTypes.Number, "Group ID.")
		Com.add_key("sort", ParametersTypes.Text, "Column name.")
		Com.add_key("search", description = "Part of note name.")
		CommandsList.append(Com)

		Com = Command("new", "Create new note.")
		Com.add_flag("o", "Open new note.")
		CommandsList.append(Com)

		Com = Command("search", "Search notes by part of name.")
		Com.add_argument(description = "Search query.", important = True)
		CommandsList.append(Com)

		return CommandsList

	def __List(self, command_data: ParsedCommandData, search: str | None = None):
			Notes = list()
			Content = {
				"ID": [],
				"Status": [],
				"Name": [],
				"Author": [],
				"Estimation": []
			}
			SortBy = command_data.keys["sort"].title() if "sort" in command_data.keys.keys() else "ID"
			if SortBy == "Id": SortBy = SortBy.upper()
			if SortBy not in Content.keys(): return ExecutionError(-1, "bad_sorting_parameter")
			Reverse = command_data.check_flag("r")
			
			if self.__Table.notes:
				Notes = self.__Table.notes

				if search:
					print("Search:", TextStyler(search, text_color = Styles.Colors.Yellow))
					NotesCopy = list(Notes)
					SearchBuffer = list()

					for Note in NotesCopy:
						Names = list()
						if Note.name: Names.append(Note.name)
						if Note.another_names: Names += Note.another_names

						for Name in Names:
							if search.lower() in Name.lower(): SearchBuffer.append(Note)

					Notes = SearchBuffer
				
				for Note in Notes:
					Name = Note.localized_name if Note.localized_name else Note.name
					if not Name: Name = ""
					Author = Note.metainfo["author"] if "author" in Note.metainfo.keys() else ""
					Status = Note.status
					if Status == "announced": Status = TextStyler(Status, text_color = Styles.Colors.Purple)
					if Status == "collected": Status = TextStyler(Status, text_color = Styles.Colors.Blue)
					if Status == "reading": Status = TextStyler(Status, text_color = Styles.Colors.Yellow)
					if Status == "completed": Status = TextStyler(Status, text_color = Styles.Colors.Green)
					if Status == "dropped": Status = TextStyler(Status, text_color = Styles.Colors.Red)
					if Status == "skipped": Status = TextStyler(Status, text_color = Styles.Colors.Cyan)
					Content["ID"].append(Note.id)
					Content["Status"].append(Status)
					Content["Name"].append(Name if len(Name) < 60 else Name[:60] + "‚Ä¶")
					Content["Author"].append(Author)
					Content["Estimation"].append(Note.estimation if Note.estimation else "")

				if len(Notes): Columns(Content, sort_by = SortBy, reverse = Reverse)
				else: print("Notes not found.")

			else:
				print("Table is empty.")

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "BattleTech_Books_Table"):
		"""
		–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–∞–±–ª–∏—Ü–µ–π —á–µ—Ä–µ–∑ CLI.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã.
		"""

		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__Table = table
		self.__Commands = self.__GenerateCommands()

	def execute(self, command_data: ParsedCommandData) -> ExecutionStatus:
		"""
		–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É.
			command_data ‚Äì –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ–º–∞–Ω–¥—ã.
		"""

		Status = None

		if command_data.name == "eras":
			Eras = self.__Table.eras
			for EraID in Eras.keys(): print(f"    {EraID}: {Eras[EraID]}")

		if command_data.name == "list":
			self.__List(command_data)

		if command_data.name == "new":
			Status = self.__Table.create_note()
			if command_data.check_flag("o"): Status["open_note"] = True

		if command_data.name == "search":
			self.__List(command_data, command_data.arguments[0])

		return Status
	
#==========================================================================================#
# >>>>> –û–°–ù–û–í–ù–´–ï –ö–õ–ê–°–°–´ <<<<< #
#==========================================================================================#

class BattleTech_Books_Note:
	"""–ó–∞–ø–∏—Å—å –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏ –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π BattleTech."""

	#==========================================================================================#
	# >>>>> –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ê–¢–†–ò–ë–£–¢–´ <<<<< #
	#==========================================================================================#

	BASE_NOTE = {
		"name": None,
		"localized_name": None,
		"another_names": [],
		"eras": [],
		"estimation": None,
		"comment": None,
		"link": None,
		"bookmark": None,
		"status": None,
		"metainfo": {}
	}

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def another_names(self) -> list[str]:
		"""–°–ø–∏—Å–æ–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π."""

		return self.__Data["another_names"]

	@property
	def bookmark(self) -> int | None:
		"""–ó–∞–∫–ª–∞–¥–∫–∞."""

		return self.__Data["bookmark"]

	@property
	def cli(self) -> BattleTech_Books_NoteCLI:
		"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI –∑–∞–ø–∏—Å–∏."""

		return self.__NoteCLI

	@property
	def comment(self) -> str | None:
		"""–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π."""

		return self.__Data["comment"]

	@property
	def eras(self) -> list[int]:
		"""–°–ø–∏—Å–æ–∫ ID —ç–ø–æ—Ö BattleTech."""

		return self.__Data["eras"]

	@property
	def emoji_status(self) -> str:
		"""–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –≤–∏–¥–∑–µ —ç–º–æ–¥–∑–∏."""

		Statuses = {
			"announced": "‚ÑπÔ∏è",
			"reading": "üìñ",
			"completed": "‚úÖ",
			"dropped": "‚õî",
			"collected": "üì¶",
			"skipped": "üö´",
			None: ""
		}

		return Statuses[self.__Data["status"]]

	@property
	def estimation(self) -> int | None:
		"""–û—Ü–µ–Ω–∫–∞."""

		return self.__Data["estimation"]

	@property
	def id(self) -> int:
		"""–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä."""

		return self.__ID

	@property
	def link(self) -> str | None:
		"""–°—Å—ã–ª–∫–∞."""

		return self.__Data["link"]

	@property
	def localized_name(self) -> str | None:
		"""–õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."""

		return self.__Data["localized_name"]

	@property
	def metainfo(self) -> dict:
		"""–ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ."""

		return self.__Data["metainfo"]
	
	@property
	def name(self) -> str | None:
		"""–ù–∞–∑–≤–∞–Ω–∏–µ."""

		return self.__Data["name"]

	@property
	def status(self) -> str | None:
		"""–°—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."""

		return self.__Data["status"]

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __init__(self, table: "BattleTech_Books_Table", note_id: int):
		"""
		–ó–∞–ø–∏—Å—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞–∫–æ–Ω—Ç–µ–Ω—Ç–∞.
			table ‚Äì –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__ID = note_id
		self.__Path = f"{table.directory}/{table.name}/books/{self.__ID}.json"
		self.__Table = table
		self.__Data = ReadJSON(self.__Path)
		self.__NoteCLI = BattleTech_Books_NoteCLI(table, self)
	
	def add_another_name(self, another_name: str) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			another_name ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
		"""

		Status = ExecutionStatus(0)

		try:

			if another_name not in self.__Data["another_names"]:
				self.__Data["another_names"].append(another_name)
				self.save()
				Status.message = "Another name added."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def add_era(self, era: int) -> ExecutionStatus:
		"""
		–î–æ–±–∞–≤–ª—è–µ—Ç —ç—Ä—É.
			era ‚Äì ID —ç—Ä—ã.
		"""

		Status = ExecutionStatus(0)

		try:

			if era in self.__Table.eras.keys():

				if era not in self.__Data["eras"]:
					self.__Data["eras"].append(era)
					self.__Data["eras"] = sorted(self.__Data["eras"])
					self.save()

				Status.message = "Era added."

			else:
				Status = ExecutionError(-2, "incorrect_era_id")

		except:
			Status = ERROR_UNKNOWN

		return Status

	def delete_another_name(self, another_name: int | str) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
			another_name ‚Äì –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å.
		"""

		Status = ExecutionStatus(0)

		try:

			if another_name.isdigit() and another_name not in self.__Data["another_names"]:
				self.__Data["another_names"].pop(int(another_name))

			else:
				self.__Data["another_names"].remove(another_name)

			self.save()
			Status.message = "Another name removed."

		except IndexError:
			Status = ExecutionError(1, "incorrect_another_name_index")

		except:
			Status = ERROR_UNKNOWN

		return Status

	def delete_era(self, era: int) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç —ç—Ä—É.
			era ‚Äì ID —ç—Ä—ã.
		"""

		Status = ExecutionStatus(0)

		try:

			if era in self.__Table.eras.keys():

				if era in self.__Data["eras"]:
					self.__Data["eras"].remove(era)
					self.save()
					Status.message = "Era removed."

			else:
				Status = ExecutionError(-2, "incorrect_era_id")

		except:
			Status = ERROR_UNKNOWN

		return Status

	def delete_metainfo(self, key: str) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
			key ‚Äì –∫–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
		"""

		Status = ExecutionStatus(0)

		try:
			del self.__Data["metainfo"][key]
			self.save()
			Status.message = "Metainfo updated."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def estimate(self, estimation: int) -> ExecutionStatus:
		"""
		–í—ã—Å—Ç–∞–≤–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É.
			estimation ‚Äì –æ—Ü–µ–Ω–∫–∞.
		"""

		Status = ExecutionStatus(0)

		try:

			if estimation <= self.__Table.options["max_estimation"]:
				self.__Data["estimation"] = estimation
				self.save()
				Status.message = "Estimation updated."

			else:
				Status = ExecutionError(1, "max_estimation_exceeded")

		except:
			Status = ERROR_UNKNOWN

		return Status

	def rename(self, name: str, localized: bool = False) -> ExecutionStatus:
		"""
		–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∑–∞–ø–∏—Å—å.
			name ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
		"""

		Status = ExecutionStatus(0)

		try:
			
			if localized:
				self.__Data["localized_name"] = name
				Status.message = "Localized name updated."

			else:
				self.__Data["name"] = name
				Status.message = "Name updated."
				
			self.save()

		except:
			Status = ERROR_UNKNOWN

		return Status

	def save(self):
		"""–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª."""

		WriteJSON(self.__Path, self.__Data)

	def set_bookmark(self, bookmark: int) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç –∑–∞–ª–∞–¥–∫—É.
			bookmark ‚Äì –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
		"""

		Status = ExecutionStatus(0)

		try:
			if bookmark == "*": bookmark = None
			self.__Data["bookmark"] = bookmark
			self.save()
			Status.message = "Bookmark updated."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def set_comment(self, comment: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
			comment ‚Äì –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.
		"""

		Status = ExecutionStatus(0)

		try:
			if comment == "*": comment = None
			self.__Data["comment"] = comment
			self.save()
			Status.message = "Comment updated."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def set_link(self, link: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç —Å—Å—ã–ª–∫—É.
			link ‚Äì —Å—Å—ã–ª–∫–∞.
		"""

		Status = ExecutionStatus(0)

		try:
			if link == "*": link = None
			self.__Data["link"] = link
			self.save()
			Status.message = "Link updated."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def set_metainfo(self, key: str, metainfo: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.
			key ‚Äì –∫–ª—é—á –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö;
			metainfo ‚Äì –∑–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö.
		"""

		Status = ExecutionStatus(0)

		try:
			if key in self.__Table.metainfo_rules.keys() and self.__Table.metainfo_rules[key] and metainfo not in self.__Table.metainfo_rules[key]: raise MetainfoBlocked()
			self.__Data["metainfo"][key] = metainfo
			self.__Data["metainfo"] = dict(sorted(self.__Data["metainfo"].items()))
			self.save()
			Status.message = "Metainfo updated."

		except MetainfoBlocked:
			Status = NOTE_ERROR_METAINFO_BLOCKED

		except:
			Status = ERROR_UNKNOWN

		return Status

	def set_status(self, status: str) -> ExecutionStatus:
		"""
		–ó–∞–¥–∞—ë—Ç —Å—Ç–∞—Ç—É—Å.
			status ‚Äì —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.
		"""

		Status = ExecutionStatus(0)
		Statuses = {
			"a": "announced",
			"r": "reading",
			"c": "completed",
			"d": "dropped",
			"i": "collected",
			"s": "skipped",
			"*": None
		}

		try:
			if status in Statuses.keys(): status = Statuses[status]
			self.__Data["status"] = status
			self.save()
			Status.message = "Status updated."

		except:
			Status = ERROR_UNKNOWN

		return Status

class BattleTech_Books_Table:
	"""–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π BattleTech."""

	#==========================================================================================#
	# >>>>> –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ï –ê–¢–†–ò–ë–£–¢–´ <<<<< #
	#==========================================================================================#

	type = "battletech:books"

	#==========================================================================================#
	# >>>>> –°–í–û–ô–°–¢–í–ê <<<<< #
	#==========================================================================================#

	@property
	def eras(self) -> list[str]:
		"""–≠–ø–æ—Ö–∏ BattleTech."""

		return self.__Eras

	@property
	def cli(self) -> BattleTech_Books_TableCLI:
		"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ CLI —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__TableCLI

	@property
	def directory(self) -> str:
		"""–ü—É—Ç—å –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__StorageDirectory

	@property
	def id(self) -> list[BattleTech_Books_Note]:
		"""–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Notes.values()

	@property
	def max_estimation(self) -> int:
		"""–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞."""

		return self.__Options["max_estimation"]

	@property
	def metainfo_rules(self) -> dict:
		"""–ü—Ä–∞–≤–∏–ª–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö."""

		return self.__Options["metainfo_rules"]

	@property
	def module(self) -> str:
		"""–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è."""

		return self.__Module

	@property
	def name(self) -> str:
		"""–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Name

	@property
	def notes(self) -> list[BattleTech_Books_Note]:
		"""–°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π."""

		return self.__Notes.values()
	
	@property
	def notes_id(self) -> list[int]:
		"""–°–ø–∏—Å–æ–∫ ID –∑–∞–ø–∏—Å–µ–π."""

		return self.__Notes.keys()

	@property
	def options(self) -> dict:
		"""–°–ª–æ–≤–∞—Ä—å –æ–ø—Ü–∏–π —Ç–∞–±–ª–∏—Ü—ã."""

		return self.__Options.copy()	

	#==========================================================================================#
	# >>>>> –ü–†–ò–í–ê–¢–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#

	def __Create(self):
		"""–°–æ–∑–¥–∞—ë—Ç –∫–∞—Ç–∞–ª–æ–≥ –∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç —Ç–∞–±–ª–∏—Ü—ã."""

		if not os.path.exists(self.__Path): os.makedirs(self.__Path)
		WriteJSON(f"{self.__Path}/manifest.json", self.__Options)

	def __GetNewID(self, container: dict) -> int:
		"""
		–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç ID –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.
			container ‚Äì –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –≥—Ä—É–ø–ø—ã.
		"""

		NewID = None

		if self.__Options["recycle_id"]:
			ListID = container.keys()

			for ID in range(1, len(ListID) + 1):

				if ID not in ListID:
					NewID = ID
					break

		if not NewID:
			NewID = int(max(container.keys())) + 1 if len(container.keys()) > 0 else 1

		return NewID

	def __GetNotesListID(self) -> list[int]:
		"""–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ ID –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø—É—Ç—ë–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ JSON."""

		ListID = list()
		Files = os.listdir(f"{self.__StorageDirectory}/{self.__Name}")
		Files = list(filter(lambda File: File.endswith(".json"), Files))

		for File in Files: 
			if not File.replace(".json", "").isdigit(): Files.remove(File)

		for File in Files: ListID.append(int(File.replace(".json", "")))
		
		return ListID

	def __ReadNote(self, note_id: int):
		"""
		–°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–ø–∏—Å–∏.
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		self.__Notes[note_id] = BattleTech_Books_Note(self, note_id)

	def __ReadNotes(self):
		"""–°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π."""

		ListID = self.__GetNotesListID()
		for ID in ListID: self.__ReadNote(ID)

	#==========================================================================================#
	# >>>>> –ü–£–ë–õ–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ <<<<< #
	#==========================================================================================#
	
	def __init__(self, storage_path: str, name: str, autocreation: bool = True):
		"""
		–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥ –ø–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π BattleTech.
			storage_path ‚Äì –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü;\n
			name ‚Äì –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã;\n
			autocreation ‚Äì —É–∫–∞–∑—ã–≤–∞–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–∞–∫–æ–≤–æ–π. 
		"""
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–∫—Å–∫–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤.
		#==========================================================================================#
		self.__StorageDirectory = storage_path.rstrip("/\\")
		self.__Name = name
		self.__Path = f"{storage_path}/{name}/books"
		self.__Notes = dict()
		self.__Options = {
			"version": 1,
			"type": self.type,
			"recycle_id": False,
			"max_estimation": 10,
			"viewer": {
				"colorize": True
			},
			"metainfo_rules": {
				"author": None,
				"publisher": None
			}
		}
		self.__Eras = {
			0: "Pre‚ÄìStar League",
			1: "Star League",
			2: "Succession Wars",
			3: "Clan Invasion",
			4: "Civil War",
			5: "Jihad",
			6: "Dark Age",
			7: "ilClan"
		}
		self.__TableCLI = BattleTech_Books_TableCLI(self)

		if os.path.exists(self.__Path):
			self.__Options = ReadJSON(f"{self.__Path}/manifest.json")
			if self.__Options["type"] != self.type: raise TypeError(f"Only \"{self.type}\" type tables supported.")
			self.__ReadNotes()

		elif autocreation:
			self.__Create()

		else: raise FileExistsError("manifest.json")

	def create_note(self) -> ExecutionStatus:
		"""–°–æ–∑–¥–∞—ë—Ç –∑–∞–ø–∏—Å—å."""

		Status = ExecutionStatus(0)

		try:
			ID = self.__GetNewID(self.__Notes)
			WriteJSON(f"{self.__StorageDirectory}/{self.__Name}/{ID}.json", BattleTech_Books_Note.BASE_NOTE)
			self.__ReadNote(ID)
			Status["note_id"] = ID
			Status.message = f"Note #{ID} created."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def rename(self, name: str) -> ExecutionStatus:
		"""
		–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É.
			name ‚Äì –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.
		"""

		Status = ExecutionStatus(0)

		try:
			os.rename(f"{self.__Path}", f"{self.__Path}")
			self.__Name = name
			Status.message = "Table renamed."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def remove_note(self, note_id: int) -> ExecutionStatus:
		"""
		–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –∏–∑ —Ç–∞–±–ª–∏—Ü—ã. 
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		Status = ExecutionStatus(0)

		try:
			note_id = int(note_id)
			del self.__Notes[note_id]
			os.remove(f"{self.__StorageDirectory}/{self.__Name}/{note_id}.json")
			Status.message = "Note removed."

		except:
			Status = ERROR_UNKNOWN

		return Status

	def get_note(self, note_id: int) -> ExecutionStatus:
		"""
		–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏.
			note_id ‚Äì –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏.
		"""

		Status = ExecutionStatus(0)

		try:
			note_id = int(note_id)

			if note_id in self.__Notes.keys():
				Status.value = self.__Notes[note_id]

			else:
				Status = ExecutionError(-1, "note_not_found")

		except:
			Status = ExecutionError(-1, "unkonwn_error")

		return Status